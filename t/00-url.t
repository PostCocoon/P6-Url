use v6;
use PostCocoon::Url;
use Test;

plan 21;
ok "%00" eq url-encode("\0"), "Encode null-char";
ok "%F0%9F%91%8C" eq url-encode("ðŸ‘Œ"), "Encode emoji";
ok url-decode(url-encode("\0")) eq "\0", "Encode and decode null-char";
ok "ðŸ‘Œ" eq url-decode(url-encode("ðŸ‘Œ")), "Encode and decode emoji";
ok "help%20mij" eq url-encode("help mij"), "Encode space";
ok "help mij" eq url-decode("help%20mij"), "Decode space";
ok "help=nee" eq build-query-string(help => "nee"), "Build simple query string";
ok "help" eq build-query-string(help => True), "build simple query string without value";
ok "help=nee\&help=ja" eq build-query-string(help => <nee ja>), "Build simple query string with duplicate keys";
ok "%F0%9F%91%8C=%F0%9F%91%8C" eq build-query-string({ "ðŸ‘Œ" => "ðŸ‘Œ" }), "Build query with emoji key";
ok { help => <nee ja> } eq parse-query-string("help=nee\&help=ja"), "Parse simple query string with duplicate keys";
ok { help => True } eq parse-query-string("help"), "Parse simple query string without value";
ok { "ðŸ‘Œ" => "ðŸ‘Œ" } eq parse-query-string("%F0%9F%91%8C=%F0%9F%91%8C"), "Parse emoji query string";
ok { host => "help.com:42", hostname => "help.com", port => "42", "scheme" => "help" } eq parse-url("help://help.com:42"), "Parse simple url";
ok "help://help.com:42" eq build-url(parse-url("help://help.com:42")), "Parse and rebuild simple url";
ok "[::]" eq parse-url("help://[::]:42")<hostname> // "", "Parse IPv6 url";
ok "help://[::]:42" eq build-url(parse-url("help://[::]:42")), "Parse and rebuild IPv6 url";
ok False eq is-valid-url(""), "Check that empty string is not an valid url";
ok False eq is-valid-url("je moeder"), "Check that \"je moeder\" is not an valid url";
ok True eq is-valid-url("http://126.0.1.3"), "Check that \"http://126.0.1.3\" is an valid url";
ok True eq is-valid-url("/"), "Check that \"/\" is an valid url";
